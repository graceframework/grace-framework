import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: org.grails.gradle.GrailsBuildPlugin

def libsConfigurations = []
subprojects { subproject ->
    if(subproject.name == 'grace-dependencies') return
    if(subproject.name == 'grace-bom') return
    if(subproject.name == 'grace-shell') {

        configurations {
            libsConfigurations << libs {
                extendsFrom compileClasspath, runtimeClasspath
                ["jsp21", "uaa"].collect { configurations.findByName(it) }.findAll { it != null }.each { extendsFrom it }
                attributes {
                    attribute(Usage.USAGE_ATTRIBUTE, subproject.objects.named(Usage, Usage.JAVA_RUNTIME))
                    attribute(Category.CATEGORY_ATTRIBUTE, subproject.objects.named(Category, Category.LIBRARY))
                }
            }
        }
    }
}

task configurePopulateDependencies {
    ext {
        baseCachesDir = "$gradle.gradleUserHomeDir/caches"
        cacheDir = "$baseCachesDir/modules-2"
        metadata = "$cacheDir/metadata-2.1/descriptors"
    }
    doLast {
        def projectNames = rootProject.subprojects*.name

        def seen = []
        libsConfigurations.each { configuration ->
            def sourceArtifacts = sourcesFor(configuration).resolvedConfiguration.lenientConfiguration.getArtifacts(Specs.satisfyAll()).groupBy {
                it.moduleVersion.id
            }
            def javadocArtifacts = javadocFor(configuration).resolvedConfiguration.lenientConfiguration.getArtifacts(Specs.satisfyAll()).groupBy {
                it.moduleVersion.id
            }
            def pomArtifacts = pomFor(configuration).resolvedConfiguration.lenientConfiguration.getArtifacts(Specs.satisfyAll()).groupBy {
                it.moduleVersion.id
            }

            for (artifact in configuration.resolvedConfiguration.resolvedArtifacts) {
                if (artifact in seen) continue
                seen << artifact
                def dependency = artifact.moduleVersion.id
                if (!projectNames.contains(dependency.name)) {
                    populateDependencies.into("$dependency.group/$dependency.name/jars") {
                        from artifact.file // this will trigger the actual download if necessary
                    }

                    populateDependencies.into("$dependency.group/$dependency.name") {
                        def pomFile = pomArtifacts[dependency]
                        if (pomFile) {
                            from pomFile.file
                        }
                    }

                    populateDependencies.from("${metadata}/${dependency.group}/${dependency.name}/${dependency.version}") {
                        include "**/*ivy.xml"
                        eachFile { it.path = "$dependency.group/$dependency.name/ivy-${dependency.version}.xml" }
                    }
                }
            }
        }
    }
}

task populateDependencies(type: Sync, dependsOn: configurePopulateDependencies) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    into homeLibDir
    includeEmptyDirs = false
}

// Can't use sync task here because this directory contains other things as well.
task sourcesJars(type: Sync) {
    into homeSrcDir
    from subprojects.findAll { !it.name.startsWith('grace-test-suite') && !it.name.startsWith('grace-dependencies') && !it.name.startsWith('grace-bom') }.sourcesJar*.outputs*.files

    // sourcesFor comes from GrailsBuildPlugin
    from { sourcesFor(libsConfigurations*.copyRecursive { it.name.startsWith('grace-datastore') }.collect { it.transitive = false; it }) }
}

task grailsCreateStartScripts(type: GrailsCreateStartScripts) {
    description = "Creates OS specific scripts to run grace-shell as a JVM application."
    mainClass = 'org.grails.cli.GrailsCli'
    applicationName = 'grace'
    defaultJvmOpts = ["-XX:+TieredCompilation", "-XX:TieredStopAtLevel=1", "-XX:CICompilerCount=3"]
    outputDir = file('bin')
    classpath = rootProject.childProjects['grace-shell'].configurations.runtimeClasspath
    projectArtifacts = rootProject.childProjects['grace-shell'].tasks['jar'].outputs.files.collect { "dist/${it.name}" }
    doLast {
        ant.replace(file: file('bin/grace'), token: 'APP_HOME', value: 'GRACE_HOME')
        ant.replace(file: file('bin/grace.bat'), token: 'APP_HOME', value: 'GRACE_HOME')
        ant.replace(file: file('bin/grace'), token: 'media/gradle.icns', value: 'media/icons/grace.icns')
        ant.chmod(file: file('bin/grace'), perm: 'ugo+rx')
    }
}

class GrailsCreateStartScripts extends org.gradle.api.tasks.application.CreateStartScripts {
    @org.gradle.api.tasks.Internal
    Collection<String> projectArtifacts=[]

    @org.gradle.api.tasks.TaskAction
    void generate() {
        def generator = new org.gradle.api.internal.plugins.StartScriptGenerator()
        generator.unixStartScriptGenerator.template = project.rootProject.childProjects['grace-shell'].resources.text.fromFile('src/main/resources/unixStartScript.txt')
        generator.windowsStartScriptGenerator.template = project.rootProject.childProjects['grace-shell'].resources.text.fromFile('src/main/resources/windowsStartScript.txt')
        generator.applicationName = getApplicationName()
        generator.mainClassName = getMainClass().get()
        generator.defaultJvmOpts = getDefaultJvmOpts()
        generator.optsEnvironmentVar = getOptsEnvironmentVar()
        generator.exitEnvironmentVar = getExitEnvironmentVar()
        generator.classpath = projectArtifacts + getClasspath().resolvedConfiguration.resolvedArtifacts.collect { artifact ->
            def dependency = artifact.moduleVersion.id
            String installedFile = "lib/$dependency.group/$dependency.name/jars/$artifact.file.name"
            if(dependency.group=='org.graceframework' && !project.file(installedFile).exists()) {
                installedFile = "dist/$artifact.file.name"
            }
            installedFile
        }
        generator.scriptRelPath = "bin/${getUnixScript().name}"
        generator.generateUnixScript(getUnixScript())
        generator.generateWindowsScript(getWindowsScript())
    }
}

task install(dependsOn: [populateDependencies, grailsCreateStartScripts]) { task ->
    subprojects { Project project ->
        if(!project.name.startsWith('grace-test-suite')) {
            task.dependsOn("$project.name:publishToMavenLocal")
        }
    }
}

task zipDist(type: Zip, dependsOn: [sourcesJars, install]) {
    destinationDirectory = "${buildDir}/distributions" as File
    archiveBaseName = 'grace'
    archiveAppendix = grailsVersion

    exclude "**/CVS/**"

    into("grace-$grailsVersion") {
        from(projectDir) {
            include 'bin/grace', 'bin/grace.bat', 'lib/', 'media/', 'samples/', 'scripts/', 'LICENSE.txt', 'INSTALL.txt', "src/"
            exclude 'ant/bin', 'src/grace', 'src/war'
        }
        from(docs.destinationDir) {
            into "doc"
        }
        from("conf") {
            into "conf"
        }
        from(homeDistDir) {
            into "dist"
            exclude "*.zip*"
            exclude "*.tar*"
        }
    }
}

task assemble(dependsOn: zipDist)

task publishToGrailsLocal { task ->
    subprojects { Project project ->
        if (!project.name.startsWith('grails-test-suite')) {
            if (project.name == 'grails-gradle-plugin') {
                task.dependsOn("$project.name:publishPluginMavenPublicationToGrailsLocalRepository")
            } else {
                task.dependsOn("$project.name:publishMavenPublicationToGrailsLocalRepository")
            }
        }
    }
}
