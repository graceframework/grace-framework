/* The following code was generated by JFlex 1.3.5 on 3/30/23, 8:59 PM */

/*
 * This is the definition (lexer.flex) for the auto-generated lexer (Lexer.java) created by JFlex <http://jflex.de/>.
 * To regenerate Lexer.java, run 'ant jflex'.
 *
 * @author Joe Walnes
 */

// class headers
package com.opensymphony.module.sitemesh.html.tokenizer;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 3/30/23, 8:59 PM from the specification file
 * <tt>file:/Users/rain/Development/github/grails/grails-sitemesh/src/main/java/com/opensymphony/module/sitemesh/html/tokenizer/lexer.flex</tt>
 */
abstract class Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 2048;

  /** lexical states */
  final public static int YYINITIAL = 0;
  final public static int ELEMENT = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\10\0\2\23\1\23\2\0\1\23\22\0\1\23\1\2\1\25\4\0"+
    "\1\26\5\0\1\3\1\0\1\17\14\0\1\1\1\24\1\5\1\6"+
    "\1\0\1\11\1\0\1\7\1\10\4\0\1\22\3\0\1\15\2\0"+
    "\1\16\1\0\1\21\1\20\1\12\3\0\1\14\2\0\1\4\1\0"+
    "\1\13\3\0\1\11\1\0\1\7\1\10\4\0\1\22\3\0\1\15"+
    "\2\0\1\16\1\0\1\21\1\20\1\12\3\0\1\14\uff87\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    // Additional methods to add to generated Lexer to aid in error reporting.
    protected int position() { return yychar; }
    protected int length()   { return yy_markedPos - yy_startRead; }
    protected int line()     { return -1; /*yyline;*/ }   // useful for debugging, but adds overhead
    protected int column()   { return -1; /*yycolumn;*/ } // useful for debugging, but adds overhead
    protected void resetLexerState() { yybegin(YYINITIAL); }
    protected abstract void reportError(String message, int line, int column);


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;


    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          yy_input = yycmap_l[yy_input];

          boolean yy_isFinal = false;
          boolean yy_noLookAhead = false;

          yy_forNext: { switch (yy_state) {
            case 0:
              switch (yy_input) {
                case 1: yy_isFinal = true; yy_state = 3; break yy_forNext;
                default: yy_isFinal = true; yy_state = 2; break yy_forNext;
              }

            case 1:
              switch (yy_input) {
                case 5: yy_isFinal = true; yy_noLookAhead = true; yy_state = 5; break yy_forNext;
                case 11: yy_isFinal = true; yy_state = 6; break yy_forNext;
                case 15: yy_isFinal = true; yy_noLookAhead = true; yy_state = 7; break yy_forNext;
                case 19: yy_isFinal = true; yy_state = 8; break yy_forNext;
                case 20: yy_isFinal = true; yy_noLookAhead = true; yy_state = 9; break yy_forNext;
                case 21: yy_isFinal = true; yy_state = 10; break yy_forNext;
                case 22: yy_isFinal = true; yy_state = 11; break yy_forNext;
                default: yy_isFinal = true; yy_state = 4; break yy_forNext;
              }

            case 2:
              switch (yy_input) {
                case 1: break yy_forAction;
                default: yy_isFinal = true; yy_state = 2; break yy_forNext;
              }

            case 3:
              switch (yy_input) {
                case 2: yy_state = 12; break yy_forNext;
                case 6: yy_state = 13; break yy_forNext;
                case 12: yy_state = 14; break yy_forNext;
                case 16: yy_state = 15; break yy_forNext;
                default: break yy_forAction;
              }

            case 4:
              switch (yy_input) {
                case 5: 
                case 11: 
                case 15: 
                case 19: 
                case 20: break yy_forAction;
                default: yy_isFinal = true; yy_state = 4; break yy_forNext;
              }

            case 6:
              switch (yy_input) {
                case 5: yy_isFinal = true; yy_noLookAhead = true; yy_state = 5; break yy_forNext;
                case 3: yy_state = 16; break yy_forNext;
                default: break yy_forAction;
              }

            case 8:
              switch (yy_input) {
                case 19: yy_isFinal = true; yy_state = 8; break yy_forNext;
                default: break yy_forAction;
              }

            case 10:
              switch (yy_input) {
                case 21: yy_isFinal = true; yy_noLookAhead = true; yy_state = 18; break yy_forNext;
                default: yy_state = 17; break yy_forNext;
              }

            case 11:
              switch (yy_input) {
                case 22: yy_isFinal = true; yy_noLookAhead = true; yy_state = 18; break yy_forNext;
                default: yy_state = 19; break yy_forNext;
              }

            case 12:
              switch (yy_input) {
                case 3: yy_state = 21; break yy_forNext;
                case 4: yy_isFinal = true; yy_state = 22; break yy_forNext;
                default: yy_state = 20; break yy_forNext;
              }

            case 13:
              switch (yy_input) {
                case 6: yy_state = 23; break yy_forNext;
                default: yy_state = 13; break yy_forNext;
              }

            case 14:
              switch (yy_input) {
                case 13: yy_state = 24; break yy_forNext;
                default: break yy_forAction;
              }

            case 15:
              switch (yy_input) {
                case 7: yy_state = 25; break yy_forNext;
                default: break yy_forAction;
              }

            case 16:
              switch (yy_input) {
                case 3: yy_state = 26; break yy_forNext;
                default: break yy_forAction;
              }

            case 17:
              switch (yy_input) {
                case 21: yy_isFinal = true; yy_noLookAhead = true; yy_state = 18; break yy_forNext;
                default: yy_state = 17; break yy_forNext;
              }

            case 19:
              switch (yy_input) {
                case 22: yy_isFinal = true; yy_noLookAhead = true; yy_state = 18; break yy_forNext;
                default: yy_state = 19; break yy_forNext;
              }

            case 20:
              switch (yy_input) {
                case 5: yy_isFinal = true; yy_noLookAhead = true; yy_state = 27; break yy_forNext;
                default: yy_state = 20; break yy_forNext;
              }

            case 21:
              switch (yy_input) {
                case 3: yy_state = 28; break yy_forNext;
                default: break yy_forAction;
              }

            case 22:
              switch (yy_input) {
                case 7: yy_state = 29; break yy_forNext;
                default: break yy_forAction;
              }

            case 23:
              switch (yy_input) {
                case 6: yy_state = 23; break yy_forNext;
                case 5: yy_isFinal = true; yy_noLookAhead = true; yy_state = 27; break yy_forNext;
                default: yy_state = 13; break yy_forNext;
              }

            case 24:
              switch (yy_input) {
                case 14: yy_state = 30; break yy_forNext;
                default: break yy_forAction;
              }

            case 25:
              switch (yy_input) {
                case 17: yy_state = 31; break yy_forNext;
                default: break yy_forAction;
              }

            case 26:
              switch (yy_input) {
                case 5: yy_isFinal = true; yy_noLookAhead = true; yy_state = 5; break yy_forNext;
                default: break yy_forAction;
              }

            case 28:
              switch (yy_input) {
                case 3: yy_state = 33; break yy_forNext;
                case 4: yy_isFinal = true; yy_noLookAhead = true; yy_state = 34; break yy_forNext;
                default: yy_state = 32; break yy_forNext;
              }

            case 29:
              switch (yy_input) {
                case 8: yy_state = 35; break yy_forNext;
                default: break yy_forAction;
              }

            case 30:
              switch (yy_input) {
                case 1: yy_state = 36; break yy_forNext;
                default: yy_state = 30; break yy_forNext;
              }

            case 31:
              switch (yy_input) {
                case 18: yy_state = 37; break yy_forNext;
                default: break yy_forAction;
              }

            case 32:
              switch (yy_input) {
                case 3: yy_state = 38; break yy_forNext;
                default: yy_state = 32; break yy_forNext;
              }

            case 33:
              switch (yy_input) {
                case 3: yy_state = 39; break yy_forNext;
                default: yy_state = 32; break yy_forNext;
              }

            case 35:
              switch (yy_input) {
                case 9: yy_state = 40; break yy_forNext;
                default: break yy_forAction;
              }

            case 36:
              switch (yy_input) {
                case 1: yy_state = 36; break yy_forNext;
                case 15: yy_state = 41; break yy_forNext;
                default: yy_state = 30; break yy_forNext;
              }

            case 37:
              switch (yy_input) {
                case 14: yy_state = 42; break yy_forNext;
                default: break yy_forAction;
              }

            case 38:
              switch (yy_input) {
                case 3: yy_state = 43; break yy_forNext;
                default: yy_state = 32; break yy_forNext;
              }

            case 39:
              switch (yy_input) {
                case 3: yy_state = 43; break yy_forNext;
                case 5: yy_isFinal = true; yy_state = 44; break yy_forNext;
                default: yy_state = 32; break yy_forNext;
              }

            case 40:
              switch (yy_input) {
                case 10: yy_state = 45; break yy_forNext;
                default: break yy_forAction;
              }

            case 41:
              switch (yy_input) {
                case 1: yy_state = 36; break yy_forNext;
                case 12: yy_state = 46; break yy_forNext;
                default: yy_state = 30; break yy_forNext;
              }

            case 42:
              switch (yy_input) {
                case 10: yy_state = 47; break yy_forNext;
                default: break yy_forAction;
              }

            case 43:
              switch (yy_input) {
                case 5: yy_isFinal = true; yy_noLookAhead = true; yy_state = 27; break yy_forNext;
                case 3: yy_state = 43; break yy_forNext;
                default: yy_state = 32; break yy_forNext;
              }

            case 44:
              switch (yy_input) {
                case 3: yy_state = 38; break yy_forNext;
                default: yy_state = 32; break yy_forNext;
              }

            case 45:
              switch (yy_input) {
                case 9: yy_state = 48; break yy_forNext;
                default: break yy_forAction;
              }

            case 46:
              switch (yy_input) {
                case 1: yy_state = 36; break yy_forNext;
                case 13: yy_state = 49; break yy_forNext;
                default: yy_state = 30; break yy_forNext;
              }

            case 47:
              switch (yy_input) {
                case 1: yy_state = 50; break yy_forNext;
                default: yy_state = 47; break yy_forNext;
              }

            case 48:
              switch (yy_input) {
                case 4: yy_state = 51; break yy_forNext;
                default: break yy_forAction;
              }

            case 49:
              switch (yy_input) {
                case 14: yy_state = 20; break yy_forNext;
                case 1: yy_state = 36; break yy_forNext;
                default: yy_state = 30; break yy_forNext;
              }

            case 50:
              switch (yy_input) {
                case 1: yy_state = 50; break yy_forNext;
                case 15: yy_state = 52; break yy_forNext;
                default: yy_state = 47; break yy_forNext;
              }

            case 51:
              switch (yy_input) {
                case 11: yy_state = 53; break yy_forNext;
                default: yy_state = 51; break yy_forNext;
              }

            case 52:
              switch (yy_input) {
                case 1: yy_state = 50; break yy_forNext;
                case 16: yy_state = 54; break yy_forNext;
                default: yy_state = 47; break yy_forNext;
              }

            case 53:
              switch (yy_input) {
                case 11: yy_state = 55; break yy_forNext;
                default: yy_state = 51; break yy_forNext;
              }

            case 54:
              switch (yy_input) {
                case 1: yy_state = 50; break yy_forNext;
                case 7: yy_state = 56; break yy_forNext;
                default: yy_state = 47; break yy_forNext;
              }

            case 55:
              switch (yy_input) {
                case 5: yy_isFinal = true; yy_noLookAhead = true; yy_state = 27; break yy_forNext;
                case 11: yy_state = 55; break yy_forNext;
                default: yy_state = 51; break yy_forNext;
              }

            case 56:
              switch (yy_input) {
                case 1: yy_state = 50; break yy_forNext;
                case 17: yy_state = 57; break yy_forNext;
                default: yy_state = 47; break yy_forNext;
              }

            case 57:
              switch (yy_input) {
                case 1: yy_state = 50; break yy_forNext;
                case 18: yy_state = 58; break yy_forNext;
                default: yy_state = 47; break yy_forNext;
              }

            case 58:
              switch (yy_input) {
                case 1: yy_state = 50; break yy_forNext;
                case 14: yy_state = 59; break yy_forNext;
                default: yy_state = 47; break yy_forNext;
              }

            case 59:
              switch (yy_input) {
                case 10: yy_state = 20; break yy_forNext;
                case 1: yy_state = 50; break yy_forNext;
                default: yy_state = 47; break yy_forNext;
              }

            default:
              yy_ScanError(YY_ILLEGAL_STATE);
              break;
          } }

          if ( yy_isFinal ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( yy_noLookAhead ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 5: 
          {  yybegin(YYINITIAL); return Parser.GT;  }
        case 61: break;
        case 3: 
          {  yybegin(ELEMENT); return Parser.LT;  }
        case 62: break;
        case 18: 
          {  return Parser.QUOTED;  }
        case 63: break;
        case 7: 
          {  return Parser.SLASH;  }
        case 64: break;
        case 9: 
          {  return Parser.EQUALS;  }
        case 65: break;
        case 44: 
          {  return Parser.TEXT;  }
        case 66: break;
        case 34: 
          {  yybegin(ELEMENT); return Parser.LT_OPEN_MAGIC_COMMENT;  }
        case 67: break;
        case 27: 
          {  return Parser.TEXT;  }
        case 68: break;
        case 22: 
          {  yybegin(ELEMENT); return Parser.LT_CLOSE_MAGIC_COMMENT;  }
        case 69: break;
        case 2: 
          {  return Parser.TEXT;  }
        case 70: break;
        case 4: 
          {  return Parser.WORD;  }
        case 71: break;
        case 8: 
          {  return Parser.WHITESPACE;  }
        case 72: break;
        case 6: 
        case 10: 
        case 11: 
          {  reportError("Illegal character <"+ yytext() +">", line(), column()); return Parser.TEXT;  }
        case 73: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return 0; }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
