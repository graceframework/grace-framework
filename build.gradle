buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:$gradleNexusPublishPluginVersion"
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$gradleExtraConfigurationsPluginVersion"
        classpath "io.sdkman:gradle-sdkvendor-plugin:$gradleSdkVendorVersion"
        classpath "org.gradle:test-retry-gradle-plugin:$gradleTestRetryPlugin"
        classpath "org.codenarc:CodeNarc:$codenarcVersion"
    }
}

ext {
    grailsVersion = project.projectVersion
    groovyVersion = System.getenv('CI_GROOVY_VERSION') ?: libs.versions.groovy.get()
    spockVersion = libs.versions.spock.get()
    isBuildSnapshot = grailsVersion.endsWith("-SNAPSHOT")
    isReleaseVersion = !isBuildSnapshot
    isCiBuild = System.getenv().get("CI") as Boolean

    // directories created during the build which are related
    // to turning the workspace root into a GRAILS_HOME
    distInstallDir = file("$buildDir/dist-tmp")
    homeDistDir = file("dist")
    homeBinDir = file("bin")
    homeConfDir = file("conf")
    homeLibDir = file("lib")
    homeSrcDir = file("src")
}

// Groovy is added as a dependency to both the 'groovy' and 'compile'
// configurations, so place the dependency in a shared variable. The
// 'compile' is required so that Groovy appears as a dependency in the
// artifacts' POMs.
ext.jointBuildGroovyJarProperty = System.getProperty('groovy.jar')
ext.groovyDependency = null

ext."signing.keyId" = System.getenv("SIGNING_KEY") ?: project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : null
ext."signing.password" = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signing.password") ? project.getProperty('signing.password') : null
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : null

if (jointBuildGroovyJarProperty) {
    def jointBuildGroovyJar = file(jointBuildGroovyJarProperty)
    if (jointBuildGroovyJar.exists()) {
        groovyDependency = dependencies.create(files(jointBuildGroovyJar))
    } else {
        throw new GradleException("The groovy.jar system property points to ${jointBuildGroovyJar.absolutePath} which does not exist.")
    }
} else {
    groovyDependency = dependencies.create("org.codehaus.groovy:groovy:${groovyVersion}") {
        exclude module:"commons-cli"
        exclude module:"ant"
    }
}

version = grailsVersion
group = "org.graceframework"

apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "io.github.gradle-nexus.publish-plugin"

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }

    transitionCheckOptions {
        maxRetries.set(40)
        delayBetween.set(java.time.Duration.ofMillis(2000))
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        if (project.projectVersion.endsWith('-SNAPSHOT')) {
            maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        }
    }

    configurations {
        all {
            resolutionStrategy {
                def cacheHours = isCiBuild ? 0 : 24
                cacheDynamicVersionsFor cacheHours, 'hours'
                cacheChangingModulesFor cacheHours, 'hours'
                eachDependency { DependencyResolveDetails details ->
                    //specifying a fixed version for all libraries with 'org.gradle' group
                    if (details.requested.group == 'org.codehaus.groovy') {
                        details.useVersion groovyVersion
                    }
                    if (details.requested.group == "org.spockframework") {
                        details.useVersion(spockVersion)
                    }
                }
            }
        }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    // This added to prevent remote cache miss, because project JAR include manifest file with Build-By and Created-By properties which might be different for CI vs Local.
    normalization {
        runtimeClasspath {
            metaInf {
                ignoreAttribute("Built-By")
                ignoreAttribute("Created-By")
            }
        }
    }
}

apply from: "gradle/idea.gradle"

subprojects { project ->
    version = grailsVersion
    group = "org.graceframework"

    configurations {
        documentation
    }

    ext.isTestSuite = project.name.startsWith("grace-test-suite")
    ext.isCiBuild = project.hasProperty("isCiBuild") || System.getenv().get("CI") as Boolean
    ext.pomInfo = {
        if (project.name != 'grace-gradle-plugin') {
            def projectName = project.name.split('-')*.capitalize().join(' ')
            delegate.name projectName
            delegate.description "Grace Framework : $projectName"
        }
        delegate.url 'https://github.com/graceframework/grace-framework'

        delegate.licenses {
            delegate.license {
                delegate.name 'The Apache Software License, Version 2.0'
                delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                delegate.distribution 'repo'
            }
        }

        delegate.scm {
            delegate.url 'https://github.com/graceframework/grace-framework'
            delegate.connection 'scm:git:git://github.com/graceframework/grace-framework.git'
            delegate.developerConnection 'scm:git:ssh://git@github.com/graceframework/grace-framework.git'
        }

        delegate.developers {
            delegate.developer {
                delegate.id 'rainboyan'
                delegate.name 'Michael Yan'
                delegate.email 'rain@rainboyan.com'
            }
        }
    }

    if (!project.hasProperty("artifactoryPublishPassword") && System.getenv("ARTIFACTORY_PASSWORD")) {
        project.ext.artifactoryPublishPassword = System.getenv("ARTIFACTORY_PASSWORD")
    }

    apply plugin: 'java-library'
    apply plugin: 'groovy'
    if (!isTestSuite) {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
    }
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'project-report'
    apply plugin: 'com.netflix.nebula.optional-base'
    apply plugin: "org.gradle.test-retry"

    java {
        withJavadocJar()
        withSourcesJar()
    }

    if (!isTestSuite) {

        publishing {
            publications {
                maven(MavenPublication) {
                    from components.java

                    if (project.name != 'grace-gradle-plugin') {
                        pom.withXml {
                            def xml = asNode()

                            xml.children().last() + pomInfo
                        }
                    }
                }
            }
        }

        afterEvaluate {
            if (project.name != 'grace-gradle-plugin') {
                signing {
                    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
                    sign publishing.publications.maven
                }
            }
        }

        tasks.withType(Sign) {
            onlyIf { isReleaseVersion }
        }

        javadoc {
            if (JavaVersion.current().isJava9Compatible()) {
                options.addBooleanOption('html5', true)
            }
        }

        processResources {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

        jar {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

    }

    if (project.name == 'grace-dependencies') return
    if (project.name == 'grace-bom') return

    sourceCompatibility = 11
    targetCompatibility = 11

    jar {
        manifest.mainAttributes(
            "Built-By": System.properties['user.name'],
            "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
            "Implementation-Title": "Grace Framework",
            "Implementation-Version": grailsVersion,
            "Implementation-Vendor": 'graceframework.org')
    }

    checkstyle {
        toolVersion = checkstyleVersion
        configDirectory.set(rootProject.file("gradle/checkstyle"))
    }
 
    codenarc {
        toolVersion = codenarcVersion
        setConfigFile(new File("$rootDir/gradle/codenarc/codenarc.groovy"))
    }

    jacoco {
        toolVersion = jacocoVersion
    }

    jacocoTestReport {
        reports {
            xml.required = false
            csv.required = false
        }
    }

    configure([compileGroovy, compileTestGroovy]) {
        groovyOptions.fork(memoryInitialSize: '128M', memoryMaximumSize: '1G')
        groovyOptions.encoding = "UTF-8"
        options.encoding = "UTF-8"
    }

    configure([compileJava, compileTestJava]) {
        options.deprecation = true
        options.debug = false
    }

    configure([groovydoc]) {
        onlyIf({
            !isTestSuite
        })
        classpath += configurations.documentation
    }

    configure([javadoc]) {
        onlyIf {
            !isTestSuite
        }
        options.encoding "UTF-8"
        options.docEncoding "UTF-8"
        options.charSet "UTF-8"
        options.jFlags "-Xms64M", "-Xmx512M"
    }

    dependencies {
        documentation libs.jansi
        documentation libs.jline
        documentation libs.groovy.ant
        documentation libs.groovy.picocli
        documentation libs.javaparser

        api groovyDependency

        testImplementation libs.groovy.test.junit5
        testImplementation libs.junit.jupiter.api
        testImplementation libs.junit.platform.runner
        testRuntimeOnly libs.junit.jupiter.engine

        if (project.name != "grace-docs") {
            // Logging
            api libs.slf4j.api
            api libs.slf4j.jcl

            // Testing
            testImplementation libs.slf4j.simple
            testImplementation libs.spock.core, { transitive = false }
            // Required by Spock's Mocking
            testImplementation libs.cglib
            testImplementation libs.objenesis
        }
    }

    def debugArguments = ['-Xmx2g', '-Xdebug', '-Xnoagent', '-Djava.compiler=NONE',
                          '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    test {
        retry {
            maxRetries = 2
            maxFailures = 20
            failOnPassedAfterRetry = true
        }
        testLogging {
            events "passed", "skipped", "failed"

            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
        }
        excludes = ["**/*TestCase.class", "**/*\$*.class"]
        if (isCiBuild) {
            maxParallelForks = 2
            maxHeapSize = '768m'
            afterSuite {
                System.out.print('.')
                System.out.flush()
            }
        } else {
            maxHeapSize = '1024m'
        }
        if (System.getProperty("debug.tests")) {
            jvmArgs debugArguments
        }
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
    }

    task singleTest(type: Test) {
        // task for running a single test with -DsingleTest.single=TestName singleTest
        if (System.getProperty("debug.tests")) {
            jvmArgs debugArguments
        }
    }

    configurations {
        meta
        published.extendsFrom archives, meta
        testRuntimeOnly {
            exclude group: 'commons-logging', module: 'commons-logging'
        }
    }

    if (!isTestSuite) {

        task installToHomeDist(type: org.grails.gradle.Upload) {
            configuration = configurations.archives
            repositories {
                flatDir name: 'libs', dirs: distInstallDir
            }
        }

        project.tasks.withType(org.gradle.api.publish.maven.tasks.PublishToMavenLocal) { org.gradle.api.publish.maven.tasks.PublishToMavenLocal t ->
            t.dependsOn installToHomeDist
            t.doLast {
                ant.copy(todir: homeDistDir, flatten: true, includeEmptyDirs: false) {
                    fileset dir: distInstallDir
                }
            }
        }
    }
}

task clean(type: Delete, group: 'build') {
    delete buildDir,
           homeBinDir,
           homeConfDir,
           homeDistDir,
           homeLibDir,
           homeSrcDir
}

// From this point on we need the subprojects to be fully configured, so force their full evaluation
subprojects.each {
    if (it.tasks.findByName('install') && it.tasks.findByName('publishToMavenLocal')) {
        it.tasks.findByName('install').finalizedBy(it.tasks.findByName('publishToMavenLocal'))
    }
    evaluationDependsOn it.path
}

apply {
    from 'gradle/docs.gradle' // tasks for building the documentation (e.g. user guide, javadocs)
    from 'gradle/assemble.gradle' // tasks for creating an installation or distribution
    from 'gradle/findbugs.gradle'
}

task buildscriptDependencies(type: org.gradle.api.tasks.diagnostics.DependencyReportTask) {
    configurations = project.buildscript.configurations
}

project.afterEvaluate {
    allprojects.repositories.each { handler ->
        handler.each {
            if (it.url.toString().startsWith("http://")) {
                throw new RuntimeException("Build should not define insecure HTTP-based Maven repostories")
            }
        }
    }
}

apply plugin: "io.sdkman.vendors"
sdkman {
    candidate = "grace"
    version = project.version
    url = "https://github.com/graceframework/grace-framework/releases/download/v${project.version}/grace-${project.version}.zip"
    hashtag = "graceframework"
}

task sdkManRelease {
    group 'SDKMAN! Release'
    description 'Performs a Major or Minor Release depend on project version'
    if (project.projectVersion.endsWith("SNAPSHOT")) {
        // Do nothing
    } else if (project.projectVersion.contains("M") || project.projectVersion.contains("RC")) {
        dependsOn 'sdkMinorRelease'
    }
    else {
        dependsOn 'sdkMajorRelease'
    }
}
